<?php namespace Saferpay;

class InvalidRegisterCardDataException extends \Exception {}

class RegisterCard extends Request
{
    public function __construct($data = array(), $salt = '')
    {
        $cardrefid = sha1($salt.rand(0, time()).time().$salt);
        $default_data = array(
            'accountid' => '99867-94913159',
            'successlink' => '',
            'faillink' => '',
            'cardrefid' => $cardrefid,
            'lifetime' => '',
            'langid' => 'en',
            'redirectmessage' => '',
        );
        $this->data = array_merge($default_data, $data);
        $this->url = 'https://www.saferpay.com/hosting/CreatePayInit.asp';
        $this->method = 'get';
    }

    /**
     * The merchantâ€™s Saferpay account number for card registration.
     * It consists of the customer number and the terminal ID.
     * Example: 99867-94913159 = SaferpayTest Account-ID
     */
    public function accountid($value) {
        $this->data['accountid'] = trim($value);
        return $this;
    }

    /**
     * The cardholder is redirected to this URL after successful registration.
     * The response data is sent in the URL.
     */
    public function successlink($value) {
        $this->data['successlink'] = trim($value);
        return $this;
    }

    /**
     * Saferpay directs the cardholder to this URL if the registration fails.
     * The response data is sent in the URL.
     */
    public function faillink($value) {
        $this->data['faillink'] = trim($value);
        return $this;
    }

    /**
     * A uniquecard replacement number that is generated by the shop system (40 characters).
     * It is required for later payment functions to refer to the original credit card number.
     *
     * Note: The CARDREFID attribute must contain a unique value.
     *       If the value is already assigned for another card, the registration will be rejected.
     */
    public function cardrefid($value) {
        $this->data['cardrefid'] = trim($value);
        return $this;
    }

    /**
     * Optional: Number of days that a registered card remains in the database (standard value = 1,000 days).
     * The time of the last use is the reference point for calculating the expiration date.
     */
    public function lifetime($value) {
        $this->data['lifetime'] = trim($value);
        return $this;
    }

    /**
     * Optional: Language in which the error messages are returned to the merchant system (2-characters code, default = "en").
     * Permitted values are "de", "en", "fr" or "it".
     */
    public function language($value) {
        $this->data['langid'] = trim($value);
        return $this;
    }

    /**
     * Optional: This text message is displayed to the cardholder while redirecting in the browser.
     * If the automatic redirect is not functioning, it can be called up by clicking on this message from SUCCESSLINK or FAILLINK.
     */
    public function redirectmessage($value) {
        $this->data['redirectmessage'] = trim($value);
        return $this;
    }

    public function execute() {
        if(empty($this->data['accountid'])) throw new InvalidRegisterCardDataException('Account Id can not be empty.');
        if(empty($this->data['successlink'])) throw new InvalidRegisterCardDataException('Successlink can not be empty.');
        if(empty($this->data['faillink'])) throw new InvalidRegisterCardDataException('Faillink can not be empty.');
        if(empty($this->data['cardrefid'])) throw new InvalidRegisterCardDataException('Card Ref. Id can not be empty.');

        return parent::execute();
    }

    public static function create() {
        return new self;
    }
}
